name: Full cycle (build and deploy to AWS)

on:
  push:
    branches:
      - "master"
    tags-ignore:
      - "**"

env:
  BUILD_ARTIFACT_NAME: app
  JAR_NAME: mylittlebudget-bot-tg-fat.jar
  GOOGLE_CREDS_FILE_NAME: google-api-credentials.json
  DEPLOY_DIR_PATH: deploy

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      releaseMade: ${{ steps.releaseMade.outputs.general }}
    steps:
      - name: Checkout the sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1.3.0
        with:
          java-version: 1.8
          architecture: x64
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build fat JAR
        run: ./gradlew shadowJar
      - name: Save last released version to env
        run: echo ::set-env name=LAST_VERSION::$(./gradlew latestVersion --quiet)
      - name: Echo last released version
        run: echo ${{ env.LAST_VERSION }}
      - name: Make new release if needed
        run: |
          ./gradlew release -Prelease.disableRemoteCheck -Prelease.disableUncommittedCheck -Prelease.customUsername=${{ github.repository_owner }} -Prelease.customPassword=${{ secrets.GH_PAT_AXION }}
      - name: Save latest version to env
        run: echo ::set-env name=LATEST_VERSION::$(./gradlew latestVersion --quiet)
      - name: Echo latest version
        run: echo ${{ env.LATEST_VERSION }}
      - name: Find out whether a release was made
        id: releaseMade
        run: |
          echo ::set-output name=general::${{ env.LAST_VERSION != env.LATEST_VERSION }}
      - name: Upload JAR
        if: ${{ steps.releaseMade.outputs.general == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build/libs/${{ env.JAR_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.releaseMade == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.DEPLOY_DIR_PATH }}
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.DEPLOY_DIR_PATH }}
      - name: Create Procfile
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
        run: |
          echo "web: java -jar $JAR_NAME $BOT_TOKEN $CHAT_ID $SPREADSHEET_ID" > Procfile
      - name: Generate Google API credentials file
        env:
            GOOGLE_API_CREDS: ${{ secrets.GOOGLE_API_CREDS }}
        run: |
          echo $GOOGLE_API_CREDS > $GOOGLE_CREDS_FILE_NAME
      - name: Set TAG_NAME var
        run: |
          echo ::set-env name=TAG_NAME::$(echo "${GITHUB_REF##*/}")
      - name: Set SOURCE_BUNDLE_NAME var
        run: |
          echo ::set-env name=SOURCE_BUNDLE_NAME::$(echo "mylittlebudget-bot-tg-$TAG_NAME.zip")
      - name: Zip source bundle
        run: |
          zip $SOURCE_BUNDLE_NAME $JAR_NAME $GOOGLE_CREDS_FILE_NAME Procfile
      - name: Deploy to AWS EB
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: mlb-tg-bot-fa
          environment_name: MlbTgBotFa-env
          version_label: ${{ env.TAG_NAME }}
          region: us-east-2
          deployment_package: ${{ env.DEPLOY_DIR_PATH }}/${{ env.SOURCE_BUNDLE_NAME }}
